(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{374:function(t,n,v){"use strict";v.r(n);var e=v(45),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,v=t._self._c||n;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"目录结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),v("p",[t._v("框架目录约定规范如下：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v(".\n├── app\n├   ├── app.js                # 应用实际入口文件\n├   ├── cluster.app.js        # 应用实际入口文件（cluster 模式的时候）\n├   ├── controllers           # Controller 文件存放目录\n├   ├── extends               # Koa 4 个内置对象扩展存放目录\n│   │   ├── application.js    # Koa Application 对象扩展（可选）\n│   │   ├── context.js        # Koa Context 对象扩展（可选）\n│   │   ├── request.js        # Koa Request 对象扩展（可选）\n│   │   └── response.js       # Koa Response 对象扩展（可选）\n├   ├── middlewares           # 中间件存放目录\n├   ├── routers               # 路由文件存放目录\n│   │   ├── default.js\n├   ├── services              # Service 文件存放目录\n├   └── views                 # HTML 模板文件存放目录\n├── app.yaml                  # 指定使用的 Node 版本及入口文件（Docker 部署需要用到）\n├── bin\n├   ├── start.js              # 约定应用启动文件（虚拟机部署需要用到）\n├── client                    # 前端源码文件存放目录\n├── config\n│   ├── config.daily.js       # Daily 环境配置文件（可选）\n│   ├── config.default.js     # 默认配置文件\n│   ├── config.development.js # 本地开发环境配置（可选）\n│   ├── config.perf.js        # 性能压测环境配置文件（可选）\n│   ├── config.pre.js         # 预发环境配置文件（可选）\n│   ├── config.prod.js        # 生产环境配置文件（可选）\n│   ├── config.qa.js          # QA 环境配置文件（可选）\n│   ├── middleware.default.js # 默认中间件配置文件\n│   └── plugin.default.js     # 默认插件配置文件\n├── package-lock.json\n├── package.json\n├── plugins                   # 插件存放目录\n├── run                       # 运行时输出的一些配置信息\n│   ├── config.json           # 应用启动后的配置对象\n│   ├── controllers.json\n│   ├── dirs.json             # 应用启动后遍历的目录列表\n│   ├── libs.json             # 应用启动后对外暴露的 Lib 函数库列表\n│   ├── middlewares.json      # 应用启动后中间件配置对象\n│   ├── routers.json          # 注册的所有路由\n│   └── services.json         # 应用启动后对外暴露的所有服务列表\n└── static                    # 前端编译后代码存放目录\n")])])]),v("table",[v("thead",[v("tr",[v("th",[t._v("文件")]),t._v(" "),v("th",[t._v("应用")]),t._v(" "),v("th",[t._v("框架")]),t._v(" "),v("th",[t._v("插件")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("app/controllers")]),t._v(" "),v("td",[t._v("️✔")]),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("app/extends")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])]),t._v(" "),v("tr",[v("td",[t._v("app/lib")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])]),t._v(" "),v("tr",[v("td",[t._v("app/middlewares")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])]),t._v(" "),v("tr",[v("td",[t._v("app/routers")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td"),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("app/services")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])]),t._v(" "),v("tr",[v("td",[t._v("app/views")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("config/config.default.js config/config.${env}.js")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])]),t._v(" "),v("tr",[v("td",[t._v("config/plugin.default.js config/plugin.${env}.js")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])]),t._v(" "),v("tr",[v("td",[t._v("config.middleware.default.js config.middleware.${env}.js")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")]),t._v(" "),v("td",[t._v("✔")])])])])])}),[],!1,null,null,null);n.default=s.exports}}]);